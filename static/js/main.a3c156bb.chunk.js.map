{"version":3,"sources":["logo.svg","sortingAlgorithms/sortingAlgorithms.js","sortingVisualizer/logo.png","controller/controller.js","sortingVisualizer/SortingVisualizer.jsx","App.js","reportWebVitals.js","index.js"],"names":["mergeSort","array","animations","length","auxArray","mergeSortHelper","startIndex","endIndex","midIndex","Math","floor","i","j","k","push","merge","qsort","animation","sorting","l","r","p","pivot","a","partition","heapsort","arr","n","maxheapify","buildheap","temp","heap","large","left","right","t","controller","props","className","type","min","max","onChange","sizeChanger","speedChanger","colorChanger","SortingVisualizer","sizechange","setState","size","createArray","speedChange","speed","colorChange","elementColor","reset","window","location","reload","randomArray","state","newArray","random","quickSortMain","anime","sortingAlgorithms","count","bars","document","getElementsByClassName","color","b","bar1","style","bar2","setTimeout","backgroundColor","height","heapMain","console","log","hardReset","this","index1","index2","index","newHeight","src","Logo","alt","event","target","value","onClick","mergeSortMain","map","width","React","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.a3c156bb.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","export const mergeSort = (array) => {\r\n  const animations = [];\r\n\r\n  if (array.length <= 1) return array;\r\n\r\n  const auxArray = [...array];\r\n  mergeSortHelper(array, 0, array.length - 1, animations, auxArray);\r\n  return animations;\r\n};\r\n\r\nfunction mergeSortHelper(array, startIndex, endIndex, animations, auxArray) {\r\n  if (startIndex == endIndex) return;\r\n  let midIndex = Math.floor((startIndex + endIndex) / 2);\r\n  mergeSortHelper(auxArray, startIndex, midIndex, animations, array);\r\n  mergeSortHelper(auxArray, midIndex + 1, endIndex, animations, array);\r\n  merge(auxArray, startIndex, midIndex, endIndex, animations, array);\r\n}\r\n\r\nfunction merge(auxArray, startIndex, midIndex, endIndex, animations, array) {\r\n  let i = startIndex,\r\n    j = midIndex + 1,\r\n    k = startIndex;\r\n\r\n  while (i <= midIndex && j <= endIndex) {\r\n    //values at index i and j are getting compared\r\n    animations.push([i, j]); //for changing the color;\r\n    animations.push([i, j]); //for reverting the color changed\r\n\r\n    if (auxArray[i] <= auxArray[j]) {\r\n      animations.push([k, auxArray[i]]);\r\n      array[k++] = auxArray[i++];\r\n      // auxArray[k++] = auxArray[i++];\r\n    } else {\r\n      animations.push([k, auxArray[j]]);\r\n      array[k++] = auxArray[j++];\r\n      // auxArray[k++] = auxArray[j++];\r\n    }\r\n  }\r\n\r\n  while (i <= midIndex) {\r\n    animations.push([i, i]);\r\n    animations.push([i, i]);\r\n    animations.push([k, auxArray[i]]);\r\n    array[k++] = auxArray[i++];\r\n    // auxArray[k++] = auxArray[i++];\r\n  }\r\n\r\n  while (j <= endIndex) {\r\n    animations.push([j, j]);\r\n    animations.push([j, j]);\r\n    animations.push([k, auxArray[j]]);\r\n    array[k++] = auxArray[j++];\r\n    // auxArray[k++] = auxArray[j++];\r\n  }\r\n}\r\n\r\n\r\n////////////////////////////////////////////////////////////////\r\n\r\nexport function qsort(array){\r\n  const animation = []\r\n  const temp = [...array]\r\n\r\n  sorting(temp, 0, array.length-1, animation)\r\n  return animation\r\n}\r\n\r\nfunction sorting(array, l, r, animation) {\r\n  if(l < r){\r\n      let p = partition(array, l, r, animation)\r\n      sorting(array, l, p, animation)\r\n      sorting(array, p+1, r, animation)\r\n  }\r\n}\r\n\r\nfunction partition(array, l, r, animation){\r\n  let pivot = array[l];\r\n  let i = l-1, j = r+1;\r\n\r\n  while(true){\r\n      do{\r\n          i++;\r\n          animation.push([i,l])\r\n          animation.push([i,l])\r\n\r\n      }while(array[i] < pivot);\r\n      do{\r\n          j--;\r\n\r\n          animation.push([j,l])\r\n          animation.push([j,l])\r\n\r\n      }while(array[j] > pivot);\r\n\r\n      if(i >= j){\r\n          return j;\r\n      }\r\n\r\n      animation.push([i, j, array[i], array[j]])\r\n      let a = array[i]\r\n      array[i] = array[j]\r\n      array[j] = a\r\n  }\r\n}\r\n\r\n\r\n\r\n///////////////////////////////////////////////////////////////\r\nexport function heapsort(array){\r\n  const animation = []\r\n  const temp = [...array]\r\n\r\n  heap(temp, array.length, animation)\r\n  return animation\r\n}\r\nfunction heap(arr, n, animation){\r\n  buildheap(arr, n, animation);\r\n  for(let i=n-1; i>=1; i--){\r\n      animation.push([0, i])\r\n      animation.push([0, i])\r\n      animation.push([0, i, arr[0], arr[i]])\r\n\r\n      let temp = arr[i];\r\n      arr[i] = arr[0]\r\n      arr[0] = temp;\r\n\r\n      maxheapify(arr, i, 0, animation)\r\n  }\r\n}\r\nfunction buildheap(arr, n, animation){\r\n  for(let i=(n-2)/2; i>=0; i--){\r\n      maxheapify(arr, n, i, animation)\r\n  }\r\n}\r\nfunction maxheapify(arr, n, i, animation){\r\n  let large = i, left = 2*i+1, right = 2*i+2;\r\n  if(left < n && arr[left] > arr[large]){\r\n      const temp = [large, left]\r\n      large = left;\r\n      animation.push(temp);\r\n      animation.push(temp);\r\n  }\r\n  if(right < n && arr[right] > arr[large]){\r\n      const temp = [large, right]\r\n      large = right;\r\n      animation.push(temp);\r\n      animation.push(temp);\r\n  }\r\n\r\n  if(large !== i){\r\n      const temp = [i, large, arr[i], arr[large]]\r\n      animation.push(temp)\r\n      const t = arr[large]\r\n      arr[large] = arr[i]\r\n      arr[i] = t;\r\n      maxheapify(arr, n, large, animation)\r\n  }\r\n}","export default __webpack_public_path__ + \"static/media/logo.269bfc74.png\";","import React from 'react';\r\nimport './controller.css';\r\n\r\nconst controller = (props) => {\r\n    return(\r\n    <div className=\"containerControl\">\r\n        <div className = \"temp\">\r\n            <label className=\"Clabel\">Size</label>\r\n            <input type=\"range\" \r\n                    min=\"50\" max=\"100\" \r\n                    onChange = {props.sizeChanger}/>\r\n        </div>\r\n\r\n        <div className = \"temp\">\r\n            <label className=\"Clabel\">Speed</label>\r\n            <input type=\"range\"\r\n                min=\"2\" max=\"20\" \r\n                onChange = {props.speedChanger}/>\r\n        </div>\r\n\r\n        <div className = \"temp\">\r\n            <label className=\"Clabel\">Color</label>\r\n            <input type=\"color\"\r\n                onChange = {props.colorChanger}/>\r\n        </div>\r\n    </div>\r\n    );\r\n}\r\n\r\nexport default controller;","import React, { Component } from \"react\";\r\nimport \"./sortingVisualizer.css\";\r\nimport * as sortingAlgorithms from \"../sortingAlgorithms/sortingAlgorithms\";\r\nimport Logo from \"./logo.png\";\r\nimport Controls from \"../controller/controller\";\r\n\r\nexport default class SortingVisualizer extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      array: [],\r\n      elementColor: [\"#66FF66\"],\r\n      hardReset: false,\r\n      size: 75,\r\n      speed: 5,\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.createArray(75);\r\n  }\r\n\r\n  sizechange = (t) => {\r\n    this.setState({ size: t });\r\n    this.createArray(t);\r\n  };\r\n\r\n  speedChange = (t) => {\r\n    this.setState({ speed: t });\r\n  };\r\n\r\n  colorChange = (t) => {\r\n    this.setState({ elementColor: t });\r\n  };\r\n\r\n  reset = () => {\r\n    window.location.reload(false);\r\n  };\r\n\r\n  randomArray = () => {\r\n    this.createArray(this.state.size);\r\n  }\r\n\r\n  createArray = (size) => {\r\n    const newArray = [];\r\n\r\n    for (let i = 0; i <= size; i++) {\r\n      if (i === 45) {\r\n        continue;\r\n      }\r\n      newArray.push(Math.floor(Math.random() * 400));\r\n    }\r\n    newArray[45] = 400;\r\n    newArray[5] = 400;\r\n    this.setState({ array: newArray });\r\n  };\r\n\r\n  mergeSortMain() {\r\n    const anime = sortingAlgorithms.mergeSort(this.state.array);\r\n    const bars = document.getElementsByClassName(\"array-bar\");\r\n\r\n    // console.log(sortedArrayChecker(anime, this.state.array));\r\n\r\n    for (let i = 0; i < anime.length; i++) {\r\n      let colorChange = i % 3 !== 2;\r\n\r\n      if (colorChange) {\r\n        const color = i % 3 === 0 ? \"red\" : this.state.elementColor;\r\n\r\n        const [index1, index2] = anime[i];\r\n        const bar1 = bars[index1];\r\n        const bar2 = bars[index2];\r\n\r\n        setTimeout(() => {\r\n          bar1.style.backgroundColor = color;\r\n          bar2.style.backgroundColor = color;\r\n        }, i * (100 / this.state.speed));\r\n      } else {\r\n        setTimeout(() => {\r\n          const [index, newHeight] = anime[i];\r\n          const bar = bars[index].style;\r\n          bar.height = `${newHeight}px`;\r\n        }, i * (100 / this.state.speed));\r\n      }\r\n    }\r\n  }\r\n\r\n  quickSortMain = (array) => {\r\n    const anime = sortingAlgorithms.qsort(array)\r\n\r\n    let count = 0;\r\n    for(let i=0; i<anime.length; i++){\r\n\r\n      let bars = document.getElementsByClassName('array-bar');\r\n      let color = count%2 === 0 ? 'red' : this.state.elementColor;\r\n      let [a, b] = anime[i]\r\n      let bar1 = bars[a].style;\r\n      let bar2 = bars[b].style;\r\n\r\n      if(anime[i].length === 2){\r\n        count++;\r\n        setTimeout(() => {\r\n          bar1.backgroundColor = color;\r\n          bar2.backgroundColor = color;\r\n        }, i*(100/this.state.speed))\r\n      }\r\n      else if(anime[i].length === 4){\r\n        setTimeout(() => {\r\n          bar1.height = `${anime[i][3]}px`\r\n          bar2.height = `${anime[i][2]}px`\r\n        }, i*(100/this.state.speed));\r\n      }\r\n    }\r\n  }\r\n  \r\n  heapMain = (array) => {\r\n    const anime = sortingAlgorithms.heapsort(array)\r\n    console.log(anime)\r\n    let count = 0;\r\n    for(let i=0; i<anime.length; i++){\r\n      let bars = document.getElementsByClassName('array-bar');\r\n        let color = count%2 === 0 ? 'red' : this.state.elementColor;\r\n        let [a, b] = anime[i]\r\n        let bar1 = bars[a].style;\r\n        let bar2 = bars[b].style;\r\n\r\n        if(anime[i].length === 2){\r\n          count++;\r\n          setTimeout(() => {\r\n            bar1.backgroundColor = color;\r\n            bar2.backgroundColor = color;\r\n          }, i*(100/this.state.speed))\r\n        }\r\n        else if(anime[i].length === 4){\r\n          setTimeout(() => {\r\n            bar1.height = `${anime[i][3]}px`\r\n            bar2.height = `${anime[i][2]}px`\r\n          }, i*(100/this.state.speed));\r\n        }\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        {/* ------ Heading of page------ */}\r\n        <div className=\"nav\">\r\n          <img className=\"logo\" src={Logo} alt=\"logo\" />\r\n          <label className=\"mainHeading\">Sorting Visualizer</label>\r\n        </div>\r\n\r\n        {/* ------ CONTROLS & SORTING BUTTONS------ */}\r\n\r\n        <div className=\"buttons\">\r\n          {/* ------ Controls------ */}\r\n          <Controls\r\n            sizeChanger={(event) => {\r\n              this.sizechange(event.target.value);\r\n            }}\r\n            colorChanger={(event) => {\r\n              this.colorChange(event.target.value);\r\n            }}\r\n            speedChanger={(event) => {\r\n              this.speedChange(event.target.value);\r\n            }}\r\n          />\r\n\r\n\r\n          {/* ------ Sorting Buttons------ */}\r\n          <div className=\"buttonContainer\">\r\n            <button className=\"sortButton\" onClick={this.randomArray}>Random Array</button>\r\n            <button\r\n              className=\"sortButton\"\r\n              onClick={() => this.mergeSortMain(this.state.array)}\r\n            >\r\n              Merge Sort\r\n            </button>\r\n            <button\r\n              className=\"sortButton\"\r\n              onClick={() => this.quickSortMain(this.state.array)}\r\n            >\r\n              Quick Sort\r\n            </button>\r\n            <button\r\n              className=\"sortButton\"\r\n              onClick={() => this.heapMain(this.state.array)}\r\n            >\r\n              Heap Sort\r\n            </button>\r\n          </div>\r\n        </div>\r\n\r\n        {/* ------ Array Container------ */}\r\n        <div className=\"array-container\">\r\n          {this.state.array.map((value, index) => (\r\n            <div\r\n              className=\"array-bar\"\r\n              key={index}\r\n              style={{\r\n                width: `${1430 / this.state.array.length - 4}px`,\r\n                height: `${value}px`,\r\n                backgroundColor: `${this.state.elementColor}`,\r\n              }}\r\n            ></div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nfunction randomIntFromInterval(min, max) {\r\n  // min and max included\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n}\r\n\r\nfunction sortedArrayChecker(arrayOne, arrayTwo) {\r\n  if (arrayOne.length !== arrayTwo.length) return false;\r\n\r\n  for (let i = 0; i < arrayOne.length; i++) {\r\n    if (arrayOne[i] !== arrayTwo[i]) return false;\r\n  }\r\n  return true;\r\n}\r\n","import logo from './logo.svg';\nimport './App.css';\nimport SortingVisualizer from './sortingVisualizer/SortingVisualizer';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SortingVisualizer/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}